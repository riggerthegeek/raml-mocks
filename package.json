{
  "name": "raml-mocks",
  "version": "0.0.0",
  "description": "Generate a mocked API from your RAML definition",
  "main": "./app",
  "nyc": {
    "all": true,
    "check-coverage": true,
    "cache": true,
    "lines": 100,
    "statements": 100,
    "functions": 100,
    "branches": 100,
    "include": [
      "src/*.js",
      "src/!(public|scripts)/*.js"
    ],
    "reporter": [
      "lcov",
      "text-summary"
    ],
    "require": [
      "babel-register"
    ],
    "sourceMap": false,
    "instrument": false
  },
  "scripts": {
    "clean": "rm -Rf ./build ./coverage ./dist ./src/public/assets/scripts ./src/public/assets/styles",
    "clean:all": "npm run clean && rm -Rf .nyc_output npm-debug.log",
    "ci": "npm test -s && npm run coverage -s && npm run compile -s",
    "compile": "npm run clean && npm run compile:js -s && npm run compile:scripts && npm run compile:styles && npm run copy && (cd build && npm install --production)",
    "compile:js": "cross-env NODE_ENV=server babel --source-maps=inline --out-dir ./build ./src",
    "compile:scripts": "mkdir -p ./src/public/assets/scripts && cross-env NODE_ENV=scripts browserify ./src/scripts/app --outfile ./src/public/assets/scripts/app.js --plugin browserify-derequire --plugin [ minifyify --no-map ] --transform babelify",
    "compile:styles": "npm run compile:styles:sass -s && npm run compile:styles:postcss -s",
    "compile:styles:sass": "node-sass --source-map-embed --output-style compressed --output ./src/public/assets/styles ./src/styles",
    "compile:styles:postcss": "postcss --use autoprefixer --autoprefixer.browsers 'last 2 versions, ie >= 9, and_chr >= 2.3' ./src/public/assets/styles/*.css -d ./src/public/assets/styles",
    "copy": "npm run copy:json -s & npm run copy:docker -s & npm run copy:public -s",
    "copy:docker": "cp Dockerfile build",
    "copy:json": "cp package.json build; cp src/*.json build",
    "copy:public": "cp -r ./src/public/ ./build && rm -f ./build/public/.gitkeep",
    "coverage": "cross-env NODE_ENV=test nyc mocha --ui bdd --recursive test/unit",
    "dist": "npm run compile && mkdir -p dist && cd build && npm install --production && tar -zcvf ../dist/dist.tar.gz ./",
    "postversion": "git push --tags && git push",
    "serve": "npm run clean && npm run serve:server -s & npm run serve:scripts -s & npm run serve:styles -s & npm run serve:browsersync -s",
    "serve:browsersync": "browser-sync start --proxy=localhost:9999 --ws --open=local --files='./src/public/**/*.css,./src/public/**/*.js,./src/views'",
    "serve:server": "cross-env NODE_ENV=server nodemon --exec babel-node --debug=5858 --legacy-watch --ignore ./src/public ./src/app.js | bunyan",
    "serve:scripts": "nodemon --legacy-watch --ignore ./src/public --exec 'npm run compile:scripts -s'",
    "serve:styles": "nodemon --legacy-watch --ignore ./src/public --ext scss --exec 'npm run compile:styles -s'",
    "start": "node --require source-map-support/register ./",
    "test": "npm run test:lint -s && npm run test:unit -s && npm run test:e2e -s",
    "test:e2e": "cross-env NODE_ENV=server LOGGING_STREAMS_STDOUT_ACTIVE=false mocha --compilers js:babel-register --throw-deprecation --ui bdd --full-trace --recursive test/e2e/test",
    "test:lint": "npm run test:lint:src -s && npm run test:lint:test",
    "test:lint:src": "eslint src",
    "test:lint:test": "eslint test",
    "test:unit": "cross-env NODE_ENV=server mocha --compilers js:babel-register --throw-deprecation --ui bdd --full-trace --recursive test/unit",
    "watch:coverage": "mkdir -p build; nodemon --ignore './build' --exec 'npm run coverage -s' --legacy-watch",
    "watch:test": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test -s' --legacy-watch",
    "watch:test:e2e": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:e2e -s' --legacy-watch",
    "watch:test:lint": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:lint -s' --legacy-watch",
    "watch:test:lint:src": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:lint:src -s' --legacy-watch",
    "watch:test:lint:test": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:lint:test -s' --legacy-watch",
    "watch:test:unit": "mkdir -p build; nodemon --ignore './build' --exec 'npm run test:unit -s' --legacy-watch"
  },
  "author": "Simon Emms <simon@simonemms.com>",
  "dependencies": {
    "@steeplejack/data": "^1.0.1",
    "@steeplejack/express": "^1.0.1",
    "bunyan": "^1.8.10",
    "express": "^4.15.3",
    "pug": "^2.0.0-rc.2",
    "source-map-support": "^0.4.15",
    "steeplejack": "^3.0.1"
  },
  "devDependencies": {
    "autoprefixer": "^7.1.1",
    "babel-cli": "^6.24.1",
    "babel-eslint": "^7.2.3",
    "babel-plugin-istanbul": "^4.1.4",
    "babel-preset-env": "^1.5.1",
    "babel-preset-latest": "^6.24.1",
    "babelify": "^7.3.0",
    "browser-sync": "^2.18.12",
    "browserify": "^14.4.0",
    "browserify-derequire": "^0.9.4",
    "chai": "^4.0.2",
    "chai-as-promised": "^6.0.0",
    "cross-env": "^5.0.0",
    "eslint": "^3.19.0",
    "eslint-config-airbnb": "^15.0.1",
    "eslint-plugin-classes": "^0.1.1",
    "eslint-plugin-import": "^2.3.0",
    "eslint-plugin-jsx-a11y": "^5.0.3",
    "eslint-plugin-react": "^7.0.1",
    "minifyify": "^7.3.5",
    "mocha": "^3.4.2",
    "node-sass": "^4.5.3",
    "nodemon": "^1.11.0",
    "nyc": "^11.0.2",
    "postcss-cli": "^4.0.0",
    "proxyquire": "^1.8.0",
    "sinon": "^2.3.2",
    "sinon-chai": "^2.10.0",
    "supertest": "^3.0.0"
  },
  "keywords": [
    "raml",
    "api",
    "mocks",
    "testing",
    "stubs"
  ]
}
